package commands

import (
	"context"
	"fmt"
	"io/fs"
	"os"
	"path"

	"github.com/alecthomas/kingpin/v2"
	"github.com/oklog/run"

	appgenerate "github.com/slok/stactus/internal/app/generate"
	"github.com/slok/stactus/internal/dev"
	"github.com/slok/stactus/internal/storage"
	htmlbase "github.com/slok/stactus/internal/storage/html/themes/base"
	htmlsimple "github.com/slok/stactus/internal/storage/html/themes/simple"
	"github.com/slok/stactus/internal/storage/iofs"
)

const (
	themeBase   = "base"
	themeSimple = "simple"
)

type GeneretaCommand struct {
	cmd        *kingpin.CmdClause
	rootConfig *RootCommand

	stactusFilePath string
	outPath         string
	theme           string
	siteURL         string
	devFixtures     bool
}

// NewGeneretaCommand returns a generator with the github status page theme.
func NewGeneretaCommand(rootConfig *RootCommand, app *kingpin.Application) *GeneretaCommand {
	cmd := app.Command("generate", "Generates the static pages.")
	c := &GeneretaCommand{
		cmd:        cmd,
		rootConfig: rootConfig,
	}

	cmd.Flag("stactus-file", "The path ot the stactus file.").Short('i').Default("./stactus.yaml").StringVar(&c.stactusFilePath)
	cmd.Flag("out", "The directory where all the generated files will be written.").Short('o').Default("./out").StringVar(&c.outPath)
	cmd.Flag("site-url", "The site base url.").Default("").StringVar(&c.siteURL)
	cmd.Flag("dev-fixtures", "If enabled it will load development fixtures.").BoolVar(&c.devFixtures)
	cmd.Flag("theme", "Select the theme to render").Default(themeSimple).EnumVar(&c.theme, themeBase, themeSimple)

	return c
}

func (c *GeneretaCommand) Name() string { return c.cmd.FullCommand() }
func (c *GeneretaCommand) Run(ctx context.Context) (err error) {
	ctx, cancel := context.WithCancelCause(ctx)
	defer cancel(err)

	logger := c.rootConfig.Logger

	// Open stactus file.
	stactusFileData, err := os.ReadFile(c.stactusFilePath)
	if err != nil {
		return fmt.Errorf("could not load stactus file: %w", err)
	}

	// Setup repository.
	repo := unifiedRepository{}

	if c.devFixtures {
		devRepo := dev.NewAutogeneratedRepository()
		repo.SystemGetter = devRepo
		repo.IncidentReportGetter = devRepo
	} else {
		d := path.Dir(c.stactusFilePath)
		rootFS := os.DirFS(d)
		incidentsFS, err := fs.Sub(rootFS, "incidents")
		if err != nil {
			return fmt.Errorf("incidents directory missing on at the same level of the stactus file: %w", err)
		}
		roRepo, err := iofs.NewReadRepository(ctx, iofs.ReadRepositoryConfig{
			IncidentsFS:     incidentsFS,
			StactusFileData: string(stactusFileData),
			Logger:          logger,
		})
		if err != nil {
			return fmt.Errorf("could not load data: %w", err)
		}

		repo.SystemGetter = roRepo
		repo.IncidentReportGetter = roRepo
	}

	switch c.theme {
	case themeBase:
		repo.UICreator, err = htmlbase.NewGenerator(htmlbase.GeneratorConfig{
			OutPath: c.outPath,
			SiteURL: c.siteURL,
			Logger:  logger,
			ThemeCustomization: htmlbase.ThemeCustomization{
				BrandTitle: "Stactus",
				BrandURL:   "https://github.com/slok/stactus",
			},
		})
		if err != nil {
			return fmt.Errorf("could not create html generator: %w", err)
		}
	case themeSimple:
		repo.UICreator, err = htmlsimple.NewGenerator(htmlsimple.GeneratorConfig{
			OutPath: c.outPath,
			SiteURL: c.siteURL,
			Logger:  logger,
			ThemeCustomization: htmlsimple.ThemeCustomization{
				BrandTitle: "Stactus",
				BrandURL:   "https://github.com/slok/stactus",
			},
		})
		if err != nil {
			return fmt.Errorf("could not create html generator: %w", err)
		}
	default:
		return fmt.Errorf("unknown theme")
	}

	// Prepare run entrypoints.
	var g run.Group

	// Upper layer context handler.
	{
		g.Add(
			func() error {
				<-ctx.Done()
				logger.Infof("Context cancelled...")
				return nil
			},
			func(err error) {
				cancel(err)
			},
		)
	}

	// Upper layer context handler.
	{
		genService, err := appgenerate.NewService(appgenerate.ServiceConfig{
			SystemGetter: repo,
			IRGetter:     repo,
			UICreator:    repo,
			Logger:       logger,
		})
		if err != nil {
			return fmt.Errorf("could not create generation service: %w", err)
		}

		g.Add(
			func() error {
				_, err := genService.Generate(ctx, appgenerate.GenerateReq{})
				if err != nil {
					return fmt.Errorf("generation failed: %w", err)
				}

				return nil
			},
			func(err error) {},
		)
	}

	return g.Run()
}

// unifiedRepository is a helper type to manage all repository as a single instance.
type unifiedRepository struct {
	storage.SystemGetter
	storage.IncidentReportGetter
	storage.UICreator
}
